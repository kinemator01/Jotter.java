package jotterapplication;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Color;
import java.awt.print.PrinterException;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;

public class JotterApplication extends JFrame implements ActionListener {
    //Menu for Jotter
     JMenuBar menu = new JMenuBar();
     JMenu file = new JMenu("File");
     JMenu edit = new JMenu("Edit");
     JMenu view = new JMenu("View");
     JMenu format = new JMenu("Text Format");
     JMenu insert = new JMenu("Insert Image");
     JMenu search = new JMenu("Search");
     
     //File menu
     JMenuItem newFile = new JMenuItem("New");
     JMenuItem openFile = new JMenuItem("Open");
     JMenuItem saveFile = new JMenuItem("Save");
     JMenuItem newwindowFile = new JMenuItem("New Window");
     JMenuItem print = new JMenuItem("Print");
     JMenuItem exit = new JMenuItem("Exit");
     
     //Edit menu
     JMenuItem cut = new JMenuItem("Cut");
     JMenuItem copy = new JMenuItem("Copy");
     JMenuItem paste = new JMenuItem("Paste");
     JMenuItem delete = new JMenuItem("Delete");
     JMenuItem selectall = new JMenuItem("Select All");
     
     //View menu
     JMenuItem statusbar = new JMenuItem("Status Bar");
    
     //Text menu
     JMenu fontFamilyMenu = new JMenu("Family");
     JMenu fontStyleMenu = new JMenu("Style");
     JMenu fontSizeMenu = new JMenu("Size");

     //Font families
     JMenuItem helvetica = new JMenuItem("Helvetica");
     JMenuItem calibri = new JMenuItem("Calibri");
     JMenuItem timesNewRoman = new JMenuItem("Times New Roman");
     JMenuItem arial = new JMenuItem("Arial");
     JMenuItem bold = new JMenuItem("Bold");
     JMenuItem italic = new JMenuItem("Italic");
     JMenuItem size10 = new JMenuItem("10");
     JMenuItem size12 = new JMenuItem("12");
     JMenuItem size14 = new JMenuItem("14");
     JMenuItem size16 = new JMenuItem("16");
     JMenuItem size18 = new JMenuItem("18");
     JMenuItem size20 = new JMenuItem("20");
     //Image Insertion menu
     JMenuItem imageInsert = new JMenuItem("Insert Image");
     
     
     //Search function components declaration//
     	JTextField searchField = new JTextField(20);
	JButton searchButton = new JButton("Search");
	JLabel searchResultLabel = new JLabel("");

     
     JTextArea textArea = new JTextArea();

     // Constructor for Jotter
     JotterApplication(){
        setTitle("JOTTER");
        setBounds(100,100,800,600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       
        // Create an ImageIcon object with the path to the new JPG icon
ImageIcon jotterLogo = new ImageIcon("C:\\Users\\banel\\OneDrive\\Documents\\New Jotter Icon.jpg");

// Set the application's icon image to the new icon
setIconImage(jotterLogo.getImage());
        
        setJMenuBar(menu);
             
        menu.add(file);
        menu.add(edit);
        menu.add(view);
        menu.add(format);
        menu.add(insert);
        
        //File menu options
        file.add(newFile);
        file.add(openFile);
        file.add(saveFile);
        file.add(newwindowFile);
        file.add(print);
        file.add(exit);
        
        //Edit menu options
        edit.add(cut);
        edit.add(copy);
        edit.add(paste);
        edit.add(delete);
        edit.add(selectall);
        
        //View menu option
        view.add(statusbar);
        
        //Format menu options
        format.add(fontFamilyMenu);
        format.add(fontStyleMenu);
        format.add(fontSizeMenu);
        fontFamilyMenu.add(helvetica);
        fontFamilyMenu.add(calibri);
        fontFamilyMenu.add(timesNewRoman);
        fontFamilyMenu.add(arial);
        fontStyleMenu.add(bold);
        fontStyleMenu.add(italic);
        fontSizeMenu.add(size10);
        fontSizeMenu.add(size12);
        fontSizeMenu.add(size14);
        fontSizeMenu.add(size16);
        fontSizeMenu.add(size18);
        fontSizeMenu.add(size20);
        
        //Image Insertion menu option
        insert.add(imageInsert);
        
        //Text Area writing 
        JScrollPane scrollpane = new JScrollPane(textArea);
        add(scrollpane);
        scrollpane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollpane.setBorder(BorderFactory.createEmptyBorder());
        textArea.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,20));
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        
        newFile.addActionListener(this);
        openFile.addActionListener(this);
        saveFile.addActionListener(this);
        newwindowFile.addActionListener(this);
        print.addActionListener(this);
        exit.addActionListener(this);
        cut.addActionListener(this);
        copy.addActionListener(this);
        paste.addActionListener(this);
        delete.addActionListener(this);
        selectall.addActionListener(this);
        
        //Search function actionlistener initialization//
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchWord(); // Call the searchWord method here
            }
        });

        
        helvetica.addActionListener(this);
        calibri.addActionListener(this);
        timesNewRoman.addActionListener(this);
        arial.addActionListener(this);
        bold.addActionListener(this);
        italic.addActionListener(this);
        size10.addActionListener(this);
        size12.addActionListener(this);
        size14.addActionListener(this);
        size16.addActionListener(this);
        size18.addActionListener(this);
        size20.addActionListener(this);
          
        //Keyword shortcuts
        newFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,KeyEvent.CTRL_DOWN_MASK));
        openFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,KeyEvent.CTRL_DOWN_MASK));
        saveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_DOWN_MASK));
        newwindowFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,KeyEvent.CTRL_DOWN_MASK));
        print.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,KeyEvent.CTRL_DOWN_MASK));
        exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,KeyEvent.CTRL_DOWN_MASK));
        cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.CTRL_DOWN_MASK));
        copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.CTRL_DOWN_MASK));
        paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.CTRL_DOWN_MASK));
        delete.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,KeyEvent.CTRL_DOWN_MASK));
        selectall.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.CTRL_DOWN_MASK));
        
        //Search components initialization//
        	JPanel searchPanel = new JPanel();
	searchPanel.add(searchField);
	searchPanel.add(searchButton);
	searchPanel.add(searchResultLabel);
	add(searchPanel, BorderLayout.NORTH); // Add the search panel to the top of the frame

    }
    @Override
     public void actionPerformed(ActionEvent e){
         //File management
         if(e.getActionCommand().equalsIgnoreCase("New")){
            textArea.setText(null);
        }else if(e.getActionCommand().equalsIgnoreCase("Open")){
            JFileChooser fileChooser=new JFileChooser();
            FileNameExtensionFilter textFilter = new FileNameExtensionFilter("Only Text Files(.txt)","txt");
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.addChoosableFileFilter(textFilter);
             int action=fileChooser.showOpenDialog(null);
            if(action!=JFileChooser.APPROVE_OPTION){
            }else{
                try {
                     BufferedReader reader = new BufferedReader(new FileReader(fileChooser.getSelectedFile()));
                    textArea.read(reader,null);
                } catch (IOException ex) {
                    Logger.getLogger(JotterApplication.class.getName()).log(Level.SEVERE, null, ex);
                }
                 }
            
        }else if(e.getActionCommand().equalsIgnoreCase("Save")){
            //Saving file
            JFileChooser fileChooser=new JFileChooser();
            FileNameExtensionFilter textFilter = new FileNameExtensionFilter("Only Text Files(.txt)","txt");
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.addChoosableFileFilter(textFilter);
            
            int action=fileChooser.showSaveDialog(null);
            if(action!=JFileChooser.APPROVE_OPTION){
            }else{
                String fileName=fileChooser.getSelectedFile().getAbsolutePath();
                if(fileName.contains(".txt"))
                    fileName=fileName+".txt";
                
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
                    textArea.write(writer);
                } catch (IOException ex) {
                    Logger.getLogger(JotterApplication.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else if(e.getActionCommand().equalsIgnoreCase("New Window")){
            //Creating a new window
            JFrame newWindow = new JFrame("New Window");
            newWindow.setSize(350, 350);
            newWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            JTextArea newTextArea = new JTextArea();
            JScrollPane newScrollPane = new JScrollPane(newTextArea);
            newWindow.add(newScrollPane);
            newWindow.setVisible(true);
        }else if(e.getActionCommand().equalsIgnoreCase("Print")){
            try {
                //Printing txt file
                textArea.print();
            } catch (PrinterException ex) {
                Logger.getLogger(JotterApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(e.getActionCommand().equalsIgnoreCase("Exit")){
            System.exit(0);
        }else if(e.getActionCommand().equalsIgnoreCase("Cut")){
            textArea.cut();
        }else if(e.getActionCommand().equalsIgnoreCase("Copy")){
            textArea.copy();
        }else if(e.getActionCommand().equalsIgnoreCase("Delete")){
            //Delete text
            int start = textArea.getSelectionStart();
            int end = textArea.getSelectionEnd();
            if (start != end) { 
            textArea.replaceRange("", start, end);
        }}else if(e.getActionCommand().equalsIgnoreCase("Paste")){
            textArea.paste();
        }else if(e.getActionCommand().equalsIgnoreCase("Select All")){
            textArea.selectAll();
        }else if (e.getActionCommand().equals("Helvetica")) {
            textArea.setFont(new Font("Helvetica", Font.PLAIN, textArea.getFont().getSize()));
        }else if (e.getActionCommand().equals("Calibri")) {
            textArea.setFont(new Font("Calibri", Font.PLAIN, textArea.getFont().getSize()));
        }else if (e.getActionCommand().equals("Times New Roman")) {
            textArea.setFont(new Font("Times New Roman", Font.PLAIN, textArea.getFont().getSize()));
        }else if (e.getActionCommand().equals("Arial")) {
            textArea.setFont(new Font("Arial", Font.PLAIN, textArea.getFont().getSize()));
        }else if (e.getActionCommand().equals("Bold")) {
            Font currentFont = textArea.getFont();
            if (currentFont.isBold()) {
                textArea.setFont(currentFont.deriveFont(currentFont.getStyle() & ~Font.BOLD));
            } else {
                textArea.setFont(currentFont.deriveFont(currentFont.getStyle() | Font.BOLD));
            }
        }else if (e.getActionCommand().equals("Italic")) {
           Font currentFont = textArea.getFont();
            if (currentFont.isItalic()) {
                textArea.setFont(currentFont.deriveFont(currentFont.getStyle() & ~Font.ITALIC));
            } else {
                textArea.setFont(currentFont.deriveFont(currentFont.getStyle() | Font.ITALIC));
            }
        }else if (e.getActionCommand().equals("10")) {
        textArea.setFont(textArea.getFont().deriveFont(10f));
        } else if (e.getActionCommand().equals("12")) {
            textArea.setFont(textArea.getFont().deriveFont(12f));
        } else if (e.getActionCommand().equals("14")) {
            textArea.setFont(textArea.getFont().deriveFont(14f));
        } else if (e.getActionCommand().equals("16")) {
            textArea.setFont(textArea.getFont().deriveFont(16f));
        } else if (e.getActionCommand().equals("18")) {
            textArea.setFont(textArea.getFont().deriveFont(18f));
        } else if (e.getActionCommand().equals("20")) {
            textArea.setFont(textArea.getFont().deriveFont(20f));
        }
     }
     
     //Now to finally create the searchWord function which we refer to as a method in java//
     private void searchWord() {
	    String searchTerm = searchField.getText().trim(); // Get the search term and trim whitespace
	    String content = textArea.getText(); // Get the content from the text area
	
	    // Reset the search result label
	    searchResultLabel.setText("");

    if (searchTerm.isEmpty()) {
        return; // Exit if the search term is empty
    }
          int count = 0;
    int index = 0;

    // Clear existing highlights
    textArea.getHighlighter().removeAllHighlights();

    // Search for the term in the text area content
    while ((index = content.indexOf(searchTerm, index)) >= 0) {
        try {
            // Highlight the found term
            textArea.getHighlighter().addHighlight(index, index + searchTerm.length(), 
               new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE));
        } catch (BadLocationException e) {
       }
        count++;
        index += searchTerm.length(); // Move index forward to continue searching
    }

    // Update the result label with the count of occurrences found
    searchResultLabel.setText(count + " result(s) found for \"" + searchTerm + "\"");
}


     
     
     
     
     
     
     
     
    public static void main(String[] args) throws Exception {
     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        new JotterApplication().setVisible(true);
    }
    

}

